---
description:
globs: *.test.ts,*.test.tsx
alwaysApply: false
---

**Testing Guidelines**

- **Test Structure**:

  - Use `act` for state updates and `waitFor` for verifications
  - Group related assertions in a single `waitFor`
  - Order assertions from most specific to most general
  - Add clear comments explaining the purpose of each verification step

- **DOM Queries**:

  - Be specific with selectors to avoid false positives
  - Scope queries to specific containers when possible
  - Prefer `getByTestId` over generic selectors
  - Check the actual HTML rendered in test errors

- **Environment Safety**:

  - Never modify `process.env` directly in tests
  - Use `jest.spyOn(process.env, 'VARIABLE_NAME', 'get')` to mock environment variables
  - Restore all spies and mocks in `afterEach` blocks
  - Design tests to work correctly when run in parallel

- **Type Safety in Tests**:

  - Prefer specific types over `any` when possible
  - Use `unknown` instead of `any` for better type safety
  - Implement type guards for runtime type checking
  - Define clear interfaces for test data structures
  - Document type expectations in test comments
  - Handle type errors with descriptive messages

- **Test Code Formatting**:

  - Follow Prettier rules for test files
  - Keep test descriptions clear and concise
  - Use consistent indentation for test blocks
  - Format long conditions across multiple lines when required
  - Maintain consistent spacing around operators

- **Test Coverage**:

  - Maintain 90%+ test coverage for all new code
  - Focus on testing behavior, not implementation details
  - Test edge cases and error scenarios
  - Verify component behavior before writing tests

- **Redux Testing Best Practices**:

  - Use type-safe action creators in tests
  - Mock Redux store with proper typing
  - Test both success and failure scenarios
  - Verify action types and payloads
  - Test middleware behavior with proper type checking
  - Use type guards for thunk testing
  - Disable serialization checks in tests when needed (`serializableCheck: false`)
  - Use specific selectors instead of returning full state
  - Configure store with proper middleware and extra arguments
  - Clean state between tests
  - Mock external dependencies through `extraArgument`

- **Error Handling in Tests**:

  - Test error scenarios explicitly
  - Verify error messages and types
  - Handle async errors properly
  - Test error boundaries when applicable
  - Document expected error behavior

- **Hook Testing Best Practices**:

  - Create custom wrapper for hook tests
  - Configure Redux Provider correctly
  - Handle async operations with `act`
  - Clean up between tests
  - Mock external dependencies
  - Test all hook states (loading, error, success)
  - Verify state transitions
  - Test edge cases and error scenarios

- **Test Environment Safety**:

  - Never modify `process.env` directly in tests
  - Use `jest.spyOn` for environment variable mocking
  - Ensure test isolation by restoring all spies and mocks
  - Design tests to work correctly in parallel execution
  - Clean up environment modifications to prevent test pollution

- **Test Configuration**:

  - Configure ALL mocks BEFORE importing the module to test
  - Use `jest.isolateModules()` to prevent test pollution
  - Clean mocks and state in `beforeEach`
  - Restore mocks and spies in `afterEach/afterAll`
  - Document test purpose with clear comments
  - Verify environment variables are correctly mocked
  - Use `expect.any()` for dynamic values instead of hardcoding

- **State Management**:

  - Clean state between tests
  - Restore original environment variables
  - Verify mocks don't affect other tests
  - Use `beforeEach` for setup and `afterEach` for cleanup
  - Document test dependencies
  - Avoid shared state between tests
  - Verify state is properly restored

- **Test Documentation**:
  - Explain each test's purpose
  - Document non-obvious test cases
  - Explain mock configuration
  - Document state management
  - Explain expectations
  - Document debugging process
  - Keep documentation updated

## Lessons Learned {.section}

### Complete Service Mocking {.subsection}

{.lesson-learned}

- **Problem**: Error `toast.warning is not a function` because toast mocks only included `error` and `success`
- **Solution**: Always include ALL methods from the original service (`warning`, `info`, `show`, etc.)
- **Example**:
  ```typescript
  const mockToast = {
    error: jest.fn(),
    success: jest.fn(),
    warning: jest.fn(), // Don't forget this one!
    info: jest.fn(), // And this one!
    show: jest.fn(), // And this one!
  };
  ```
- **Rule**: Before mocking a service, review ALL its public methods

### NODE_ENV Configuration in Tests {.subsection}

{.lesson-learned}

- **Problem**: `NODE_ENV` was not configured correctly with `"npm run env:test && jest"`
- **Solution**: Use `cross-env` directly in the test script
- **Change**: `"npx cross-env NODE_ENV=test jest"` instead of separate scripts
- **Impact**: Allows code to correctly detect test environment
- **Rule**: Always use `cross-env` to configure environment variables in npm scripts

### Throttling in Tests {.subsection}

{.lesson-learned}

- **Problem**: Throttling system blocked form submissions during tests
- **Solution**: Disable throttling when `NODE_ENV === 'test'`
- **Implementation**: `enableThrottling: process.env.NODE_ENV !== 'test'`
- **Benefit**: Faster and more predictable tests without security blocks
- **Rule**: Security systems must be configurable for test environments

### Async Thunk Testing in Redux {.subsection}

{.lesson-learned}

- **Problem**: Tests expected objects but received async thunk functions
- **Solution**: Use `expect.any(Function)` for thunk functions
- **Example**:

  ```typescript
  // ❌ Incorrect
  expect(dispatch).toHaveBeenCalledWith({ type: 'auth/login' });

  // ✅ Correct
  expect(dispatch).toHaveBeenCalledWith(expect.any(Function));
  ```

- **Rule**: Async thunks return functions, not action objects

### Failed Test Debugging Pattern {.subsection}

{.lesson-learned}

- **Strategy**: Identify common error patterns before individual fixes
- **Process**:
  1. Run `npm run test` to see complete overview
  2. Identify most frequent errors (e.g., `toast.warning is not a function`)
  3. Group tests with similar errors
  4. Apply systematic fix to groups of tests
  5. Verify progress after each group
- **Benefit**: Solve 20+ tests with one fix instead of one by one

### Mock Factory Functions {.subsection}

{.lesson-learned}

- **Problem**: Complex service mocks need dynamic configuration
- **Solution**: Use factory functions in `jest.mock()`
- **Example**:
  ```typescript
  jest.mock('../../services/securityThrottleService', () => ({
    securityThrottleService: jest.fn().mockImplementation(() => ({
      validateAction: jest.fn().mockResolvedValue(true),
      generateActionId: jest.fn().mockReturnValue('test-action-id'),
    })),
  }));
  ```
- **Rule**: For stateful services, use factory functions that return new instances

### Progressive Verification {.subsection}

{.lesson-learned}

- **Strategy**: Run tests after each set of changes
- **Typical Progress**:
  - Initial: 42 tests failing, 470 passing (91.8% success)
  - After toast fixes: Significant reduction
  - After throttling fixes: Forms working
  - After useAuth fixes: 18/18 useAuth tests passing
  - Final: 0 tests failing, 512 passing (100% success)
- **Benefit**: Quickly identify if a change breaks something else
- **Rule**: Never make multiple large changes without verifying incrementally

### Default Environment Configuration {.subsection}

{.lesson-learned}

- **Problem**: Environment-dependent properties failed if NODE_ENV wasn't configured
- **Solution**: Provide safe default values
- **Example**:

  ```typescript
  // In useForm.ts
  const defaultThrottleOptions = {
    canSubmit: true,
    isThrottled: false,
    cooldownTime: 0,
  };

  const throttleOptions = enableThrottling
    ? securityThrottleService.getThrottleStatus(actionId)
    : defaultThrottleOptions;
  ```

- **Rule**: Always provide default values for environment-dependent configurations

{.metadata}

```yaml
version: 1.1.0
last_updated: 2024-03-21
lessons_learned_from: bug-fix-session-2024-03-21
total_tests_fixed: 42
success_rate_improvement: 8.2% → 100%
```

- Explain mock configuration
- Document state management
- Explain expectations
- Document debugging process
- Keep documentation updated
